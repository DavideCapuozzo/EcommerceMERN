LIBRERIA GIGANTE CHE CONTIENE MOLTISSIMI COMPONENTI GIA PREFATTI INSTALLABILI FACILMENTE, IL PROGETTO SARA BASATO INTERAMENTE SU QUESTA LIBRERIA
(il bootstrap di react)
Puoi seguire l'installazione guidata direttamente da questo sito per creare la parte frontend del sito
https://ui.shadcn.com/docs/installation/vite


use backend:
bcryptjs
cookie-parser
cloudinary
cors
dotenv
express
jsonwebtoken
moongose
multer
npm
nodemon

il progetto sarà diciso in due sezioni:
client
server

----------------------------------------------------------------------------------------------------------------------------------------------
################################### SERVER GUIDE ##########################################################################

partiamo col sviluppare la parte server:
ci posizioniamo sulla cartella di interesse e lanciamo il comando

npm init -y

usiamo questo comando per inizzializzare il nostro progetto
una volta concluso andiamo a installare tutte le librerie utili

npm i bcryptjs cloudinary cookie-parser cors dotenv express jsonwebtoken mongoose multer nodemon

GITIGNORE
una volta installate le dipendenze utili andrò ad escludere tutto
cio che non voglio pushare su git hub. lo facci otrmite il file .gitignore
inizialmente lo imposteremo in questo modo

# ignore dependeci
node_modules/

# ignore file
.env

ENTRY POINT server.js
vado a creare nella cartella server il file server.js

---------------------------------------------------------
CREO UN DATABASE SU MONGO DB 
devsoloweb
7D88lQY9Shdz5zVl

vado ad impostare la connessione nel mio file server.js:

require('dotenv').config();// Carica le variabili dal file .env
const express = require('express')
const mongoose = require('mongoose');
const cookieParser = require('cookie-parser'); //Un middleware che analizza i cookie inviati dal client al server.
const cors = require('cors'); //Un middleware che gestisce il Cross-Origin Resource Sharing, permettendo ad applicazioni in altri domini di comunicare con il server.


const URI_MONGO = process.env.URI_MONGO; // Usa la variabile di ambiente

mongoose.connect(URI_MONGO).then(()=>console.log('MongoDB Connected')).catch((error)=> console.log(error));

const app = express()
const PORT = process.env.PORT || 5000;

app.use( //Metodo per aggiungere middleware all'applicazione
    cors({
        origin : 'http://localhost:5173/',
        methods : ['GET', 'POST', 'DELATE', 'PUT'],
        allowedHeaders : [
            "Content-Type",
            "Auttorization",
            "Cache-Control",
            "Expires",
            "Pragma"
        ],
        credentials : true
    }) //Aggiunge il supporto per le richieste Cross-Origin. L'oggetto vuoto {} indica che tutte le origini sono permesse.
)

app.use(cookieParser);
app.use(express.json());

app.listen(PORT, ()=> console.log(`Server is now running on port ${PORT}`))

----------------------------------------------------------------------------------------------------------------------------------------------
################################### CLIENT GUIDE ##########################################################################

CLIENT folder
nel frattempo creo la cartella client dove andrò ad installare react con vite
mi reco sul sito di vite e seguo i passaggi per l'installazione che mi permetterà di creare la cartella client

Ora vado ad installare i tool utili per react
npm i @reduxjs/toolkit react-redux axios react-router-dom

npm install tailwindcss postcss autoprefixer
npx tailwindcss init -p

installiamo la libreria dei COMPONENTI
npx shadcn@latest init

testiamo l'installazione di un componente
npx shadcn@latest add button

---------------------- creazione dello store per la gestione degli stati complessi
creo la cartella store in scr
al suo interno creo il file store.js
import { configureStore } from "@reduxjs/toolkit";
import authReducer from "./auth-slice";

const store = configureStore({
    reducer:{
        auth: authReducer
    }
})

export default store;

dopo di che andro a dedicare una cartella per ogni stato in questo caso partimo dallo stato di autenticazione:
quindi creao la cartella authSlice e al suo interno creo il file index.js

import { createSlice } from "@reduxjs/toolkit";

const initialState = {
    isAuthenticated : false,
    isLoading: false,
    user: null
}

export const authSlice = createSlice({
    name:'auth',
    initialState: initialState,
    reducers:{
        setUser:(state, action) => {

        }
    }
})


export const {setUser} = authSlice.actions;
export default authSlice.reducer;

una volta fatto cio vado ad importare il mio store nell applicazione, per fare cio vado ad aggiungere il provider nel file main.js
import { createRoot } from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import { Provider } from 'react-redux'
import './index.css'
import App from './App.jsx'
import store from './store/store'

createRoot(document.getElementById('root')).render(
  <BrowserRouter>
    <Provider store={store}>
      <App />
    </Provider>
    
  </BrowserRouter>
  
)

ricapitolando:
-creo la cartella store
-creo il file store.js e lo configuro 
import { configureStore } from "@reduxjs/toolkit";
importo i miei slice
-creo la cartella con all interno il mio slice di interesse in questo caso auth-slice > index.js
creo lo slice 
import { createSlice } from "@reduxjs/toolkit";
export const {setUser} = authSlice.actions;
export default authSlice.reducer;
-vado ad aggiungere il mio store all applicazione tramite il file main.js
import { Provider } from 'react-redux'
<Provider store={store}>


---------------------- creazione pagina e componente auth
vado a creare una cartella pages
al suo interno creao la cartella auth-pages
al suo interno creo la pagina login.jsx e register.jsx
ora vado a creare il componente quindi all'interno della cartella component creo la cartella auth
al suo interno creo la cartella auth
al suo interno creo il file layout.jsx

il componente layout.js anndra a definire per l'appunto la struttura delle pagine in cui andremo ad utilizzarlo
function AuthLayout(){
  return(
    <>
      <div className="flex min-h-screen w-full">
        <div className="hidden lg:flex item-center justify-center bg-black w-1/2 px-12">
          <div className="max-w-md space-y-6 text-center text-primary-foreground">
            <h1 className="text-4xl font-extrabold tracking-tight">Welcome to Ecommerce Shopping</h1>
          </div>
        </div>
        <div className="flex flex-1 items-center justify-center bg-background px-4 py-12 sm:px-6 lg:px-8">
          <Outlet></Outlet>
        </div>
      </div>
    </>
  )
}

export default AuthLayout

questo layout dividera la pagina in due parti la prima parte con sfondo nero e scritta Welcome to Ecommerce Shopping
la seconda parte sara riempita dal componente che richiameremo insieme a questo layout grazie a <Outlet></Outlet>

andiamo poi a costruire la pagina login.js
function AuthLogin(){
    return(
        <div>Login </div>
    )
}

export default AuthLogin

e all'interno nella nostra pagina app.jsx andremo ad inserire il seguente codice che ci permettera di gestire il layout con il componente pagina
function App() {

  return (
    <>
      <div className='flex flex-col overflow-hidden bg-white'>
        <h1>Header Component</h1>
        <Routes>
          <Route path='/auth' element={<AuthLayout />}>
            <Route path='login' element= {<AuthLogin />}></Route>
            <Route path='register' element= {<AuthRegister/>}></Route>
          </Route>
        </Routes>
      </div>
    </>
  )
}

export default App

quindi se andro a richiamare il link http://localhost:5173/auth/login mi restituira il layout con al segna posto outlet
il componente login

se andro a cercare la pagina http://localhost:5173/ mi verra restituito semplicemente il componente <h1>Header Component</h1>
senza tutto il sistema di Routes

con questa stessa base andiamo a creare tutte le pagine utili admin, notfound, Shopping

------------------------ check Auth
-Ora andiamo a creare la cartella common al cui interno creeremo il file check-auth.jsx 
dove andremo ad inserire la logica per controllare l'autenticazione di un utente

import { Navigate, useLocation } from "react-router-dom"

function CheckAuth({isAuthentucated, user, children}){

    const location = useLocation()

    if(!isAuthentucated && !(location.pathname.includes('/login') || location.pathname.includes('/register'))){
        return<Navigate to="/auth/login"></Navigate>
    }

    if(isAuthentucated && (location.pathname.includes('/login') || location.pathname.includes('/register'))){
        if(user?.role === 'admin'){
            return <Navigate to= "/admin/dashboard"></Navigate>
        } else{
            return <Navigate to= "/shop/home"></Navigate>
        }
    }

    if(isAuthentucated && user?.role !== 'admin' && location.pathname.includes('admin')){
        return <Navigate to="/unauth-page"></Navigate>
    }

    if(isAuthentucated && user?.role === 'admin' && location.pathname.includes('shop')){
        return <Navigate to="/admin/dashboard"></Navigate>
    }

    return(
        <>
            {children}
        </>
    )

    
}

export default CheckAuth

Navigate libreria che ci permette di linkare le pagine
useLocation libreria che ci permette di capire in che pagina si trova il nostro utente

----------- Unauthopage
andiamo a creare il file Unauthopage.jsx all'interno della cartella page > Unauthopage-page
questa sarà la pagina che verrà visualizzata nel caso l'utente che sta provando ad accedere non 
avesse i permessi per farlo

Ora per andare a far si che le nostre regole check-auth.jsx vengano applicate alle pagine nel nostro file
app.jsx andiamo a creare le variabili di interesse  isAuthentucated e user e andreamo ad importare
il nostro componente check-auth.jsx all'interno delle route 

function App() {

  /* const isAuthentucated = false;
  const user = null */

  /* const isAuthentucated = true;
  const user = {
    name:"Samsung",
    role: "user",
  }*/

  const isAuthentucated = true;
  const user = {
    name:"Samsung",
    role: "admin",
  }

  return (
    <>
      <div className='flex flex-col overflow-hidden bg-white'>
        
        <Routes>
          <Route path='/auth' element={<CheckAuth isAuthentucated={isAuthentucated} user={user}><AuthLayout /></CheckAuth>}>
            <Route path='login' element= {<AuthLogin />}></Route>
            <Route path='register' element= {<AuthRegister/>}></Route>
          </Route>
          <Route path='/admin' element={<CheckAuth isAuthentucated={isAuthentucated} user={user}><AdminLayout /></CheckAuth>}>
            <Route path='dashboard' element= {<AdminDashboard />}></Route>
            <Route path='products' element= {<AdminProducts />}></Route>
            <Route path='orders' element= {<AdminOrders />}></Route>
            <Route path='feauters' element= {<AdminFeauters />}></Route>
          </Route>
          <Route path='/shop' element={<CheckAuth isAuthentucated={isAuthentucated} user={user}><ShoppingLayout/></CheckAuth>}>
            <Route path='account' element={<ShoppingAccount></ShoppingAccount>}></Route>
            <Route path='checkout' element={<ShoppingCheckout></ShoppingCheckout>}></Route>
            <Route path='home' element={<ShoppingHome></ShoppingHome>}></Route>
            <Route path='listing' element={<ShoppingListing></ShoppingListing>}></Route>
          </Route>
          <Route path='*' element={<NotFound></NotFound>}></Route>
          <Route path='/unauth-page' element={<UnauthPage></UnauthPage>}></Route>
        </Routes>
      </div>
    </>
  )
}

ora possiamo provare a giocare con i vari link per vedere se le nostre regole vengono applicate correttamente



-------------------------------------------------------------------------------------------------------------------------------------------
########################################### form register and login
guardando i file scopri tutta la logica per integrare il form nelle pagine di login e register
--------------------------------------------------------------------------------------------------------------------------------


















###################################################################################################################
####################################################################################################################
--------------------------------- INTEGRAZIONE LATO SERVER - LOGIN ---------------------------------------------------------
###################################################################################################################
####################################################################################################################

Ora vogliamo che tutti i nostri utenti si possano registrare e autenticare e vogliamo salvare 
tutte le credenziali dei nostri utenti in un database mongoDB.
per fare cio come abbiamo imparato dobbiamo costruire la nostra struttura di chiamate per
poter compiere le varie azioni di registrazione, accesso, eliminazione e modicfica del nostro utente.

utulizzeremo la struttura classica di route composta dalle seguenti cartelle:
models, routes, controllers

----------------------------------------------------------------------------------------------------------------------------
############################ utente
Partendo dall'utente andiamo a creare quello che `e il suo schema di partenza
cioe i dati che mongoDb si aspettera di ricevere quando un utente si registra o cerca di accedere
quindi inseriramo all'interno della cartella models il file Users.js attualmente cosi composto:

const mongoose = require('mongoose');
const { Schema } = mongoose;

const UserSchema = new mongoose.Schema(
    {
        userName:{
            type: String,
            ref: 'User',
            unique: true,
            require: [true, "Name is required"],
            minlength: [2, "Name too short"],
            maxlength: [10, "Name too long"],
            match: [/^[a-zA-Z\s'-]+$/, 'Invalid name characters']
        },

        email:{
            type:String,
            unique: true,
            ref:'Mail',
            require: [true, "can't be blank"],
            match: [/\S+@\S+\.\S+/, 'is invalid'],
        },

        password:{
            type: String,
            ref: 'Password',
            require: [true, "Password is required"],
        },

        role:{
            type: String,
            default: 'user'
        },
    }
)

module.exports = mongoose.model('User', UserSchema);
----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------

############ routes/auth/auth-routes.js
const express = require('express')
const router = express.Router()
const { registerUser } = require('../../controllers/auth/auth-controllers')


router.post('/register', registerUser)


module.exports = router;

----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------

############ controllers/auth/auth-controllers.js

const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../../models/User')



//register

exports.registerUser = async(req, res) =>{
    const {userName, email, password} = req.body;

    try {

        const hashPassword = await bcrypt.hash(password, 12);
        const newUser = new User({
            userName, 
            email, 
            password: hashPassword,
        })

        await newUser.save()
        res.status(200).json({
            success: true,
            message: "Registration Succesfully",
        })
        
    } catch (e) {
        console.log(e)
        res.status(500).json({
            success: false,
            message: "Some Error Occurred",
        });
    }
}

//login

const login = async(req, res) =>{


    try {
        
    } catch (e) {
        console.log(e)
        res.status(500).json({
            success: false,
            message: "Some error occurred",
        });
    }
}

----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
TORNIAMO ALLA PARTE CLIENT PER APPLICARE LE NOSTRE API APPENA DI REGISTRAZIONE UTENTE CREATE

























min 2.13
