/////////////////////////////////////////////////////////////////////////////////////
///////////////// ################## STEP & NOTE ################///////////////////
////////////////////////////////////////////////////////////////////////////////////

--------------------- START
1 - Install React) npm create vite@latest AppName -- --template react

2 - Install tailwindcss) npm install -D tailwindcss postcss autoprefixer

3 - Install tailwindcss) npx tailwindcss init -p

4 - Confiure tailwind.config.js)
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

5 - Confiure index.css)
@tailwind base;
@tailwind components;
@tailwind utilities;

if you need @layer for re-use a component insert into file this
exemple:

@layer components{
  .square{
    @apply h-[150px] w-[150px] bg-red-600;
  };

  .squareDue{
    @apply h-[150px] w-[150px] bg-black -rotate-45;
  }
}

6) npm install react-router-dom

7) npm install @reduxjs/toolkit react-redux

8) create store folder (add in it slice file)

9) create store.js in store folder and setting the file in this mode
import { configureStore } from '@reduxjs/toolkit'

export default configureStore({
    reducer:{},
})

10) confiure main.jsx 
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

import { Provider } from 'react-redux'
import { createBrowserRouter, RouterProvider } from 'react-router-dom'
import store from './store/store.js'

const router = createBrowserRouter([
  {
    path: "/",
    element: <App></App>
  }
])

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Provider store={store}>
      <RouterProvider router={router}></RouterProvider>
    </Provider>
  </React.StrictMode>,
)





////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////// ################## useReducer - Come passare una lista di elementi ################///////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


1) CREO LO SLIECE, che ci permetterà di raccogliere tutti i nostri dati che vogliamo gestire in modo dinamico e passarli ai componenti di
nostro interesse. Per farce cio creiamo uno sliceNome.js nella cartella store.

import { createSlice } from "@reduxjs/toolkit";  //IMPORTIAMO LA FUNZIONALITà PER CREARE LO SLICE

export const sliceNotes = createSlice({ // CREIAMO LO SLICE
    name: 'notes', // ASSENIAMO UN NOME
    initialState: { // ASSEGNIAMO UN VALORE DI PARTENZA
        value: [
            {
                id: 0,
                title: "Nota 1",
                date: "10/05/2024",
                text: "Lorem Ipsum è un testo segnaposto utilizzato nel settore della tipografia e della stampa. Lorem Ipsum è considerato il testo segnaposto standard sin dal sedicesimo secolo, quando un anonimo tipografo prese una cassetta di caratteri e li assemblò per preparare un testo campione."
            },
            {
                id: 1,
                title: "Nota 2",
                date: "10/05/2024",
                text: "Lorem Ipsum è un testo segnaposto utilizzato nel settore della tipografia e della stampa. Lorem Ipsum è considerato il testo segnaposto standard sin dal sedicesimo secolo, quando un anonimo tipografo prese una cassetta di caratteri e li assemblò per preparare un testo campione."
            },
            {
                id: 2,
                title: "Nota 3",
                date: "10/05/2024",
                text: "Lorem Ipsum è un testo segnaposto utilizzato nel settore della tipografia e della stampa. Lorem Ipsum è considerato il testo segnaposto standard sin dal sedicesimo secolo, quando un anonimo tipografo prese una cassetta di caratteri e li assemblò per preparare un testo campione."
            },
            {
                id: 3,
                title: "Nota 4",
                date: "10/05/2024",
                text: "Lorem Ipsum è un testo segnaposto utilizzato nel settore della tipografia e della stampa. Lorem Ipsum è considerato il testo segnaposto standard sin dal sedicesimo secolo, quando un anonimo tipografo prese una cassetta di caratteri e li assemblò per preparare un testo campione."
            },
            {
                id: 4,
                title: "Nota 5",
                date: "10/05/2024",
                text: "Lorem Ipsum è un testo segnaposto utilizzato nel settore della tipografia e della stampa. Lorem Ipsum è considerato il testo segnaposto standard sin dal sedicesimo secolo, quando un anonimo tipografo prese una cassetta di caratteri e li assemblò per preparare un testo campione."
            },
        ]
    },
    reducers:{ // ASSEGNAMO DELLE AZIONI CHE POSSIAMO COMPIERE
        add:(state, action) => {
            state.value.push(action.payload)
        },
    }
})

export const { add } = sliceNotes.actions // ESPORTIAMO LE AZIONI CRETE

export const notesReducer = sliceNotes.reducer // ESPORTIAMO IL REDUCER


2) CI SPOTIAMO NEL NOSTRO FILE store.js, e importiamo nella sezione dei reducer il nostro reducer che abbiamo esportato dal nostro file slice
import { configureStore } from '@reduxjs/toolkit'
import { notesReducer } from './sliceNotes' //IMPORTIAMO IL REDUCER

export default configureStore({
    reducer:{
        notes: notesReducer // DIAMO UN NOME AL REDUCER
    },
})

3) CREIAMO IL NOSTRO COMPONENTE GENERALE HE GESTIRà GLI ELEMENTI CHE LI PASSEREMO
function ListNotes({title, date, text}){  //{title, date, text} sono elementi che passiamo al nostro componente {} utilizziamo le graffe perchè react vuole che vengno passati tramite un array
    return(
        <>
            <div className="col-3">
                <div className="h-4"></div>
                <div className="relative flex w-96 flex-col rounded-xl bg-white bg-clip-border text-gray-700 shadow-md">
                    <div className="p-6">
                        <div className="flex justify-between">
                            <div className="col-start-3">
                                <h5 className="mb-2 block font-sans text-xl font-semibold leading-snug tracking-normal text-blue-gray-900 antialiased">
                                {title}
                                </h5>
                            </div>
                            
                            <div className="col-end-3">
                                <h6>{date}</h6>
                            </div>
                            
                        </div>
                        
                        <p className="block font-sans text-base font-light leading-relaxed text-inherit antialiased">
                        {text}
                        </p>
                    </div>
                </div>
            </div>
            
            
        </>
    )
}

export default ListNotes

4) CREIAMO IL CICLO CHE PERMETTERà DI PASSARE I NOSTRI DATI 
import AddNotes from "../components/AddNotes"
import ListNotes from "../components/ListNotes"
import { useSelector } from 'react-redux' // IMPORTIAMO QUESTA LIBRERIA PER POTER RECUPERARE LO STATO ATTUALE DEL NOSTRO SLICE


function Home(){

    const selectorNotes = useSelector((state) => state.notes.value); // SELEZIONIAMO LO STATO ATTUALE DEL NOSTRO REDUCER

    #console.log(selectorNotes);
    

    return(
        <>
            
            <div className="">
                <AddNotes></AddNotes>
                <div className="h-24"></div>
                <div>
                    <h1>Lista Notes</h1>
                </div>
                <div className="flex flex-row grid lg:grid-cols-3 md:grid-cols-2 gap-8">

                    {selectorNotes.map((notes) => (  // MAPPIAMO LO STATO RECUOERATO DA USESELECTOR
                        <ListNotes key={notes.id} title={notes.title} date={notes.date} text={notes.text} /> // DEVE ESSERE SEMPRE PRESENTE UNA KEY PER FAR SI CHE OGNI ELEMENTO SIA UNICO
                    ))}

                </div>
                
                
                
            </div>
            
        </>
    )
}

export default Home



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////// ################## GESTIONE FORM (aggiungiamo elementi tramite form) ################ ///////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1) creiamo il nostro form

function AddNotes(){

    const date = new Date().toLocaleDateString();

    return(
        <>
            <div className="h-4"></div>
            <div className="text-center w-full">
                <h1>AGGIUNGI NOTA</h1>
                <div className="h-4"></div>
                <form onSubmit={handleSubmit}>
                    <div className="">
                        <div>
                            <label className="mt-7">Title</label>
                            <input className="h-6 w-2/4 bg-slate-100" type="text" name="title" value={formData.title} onChange={hendleInputChange}/>
                        </div>
                        <div className="h-4"></div>
                        <div>
                            <label className="mt-7">Text</label>
                            <input className="h-64 w-2/4 bg-slate-100" type="text" name="text" value={formData.text} onChange={hendleInputChange}/>
                        </div>
                        <div className="h-4"></div>
                        <button type="submit">Aggiungi Nota</button>
                    </div>
                </form>
                
            </div>
            
        </>
    )
}

export default AddNotes


2) una volta creata l'azione nel nostro slice nella parte reducer andiamo a lavorare sul componente del form

import { useDispatch } from "react-redux" //importiamo per andare a richiamare le azioni contenute nel nostro reducer
import { useState } from "react" // importiamo per andare a gestire lo stato al cambiamento del form
import { add } from "../store/sliceNotes" // importiamo l'azione utile per aggiungere nuovi elementi al nostro stato dello slice iniziale

function AddNotes(){

    const date = new Date().toLocaleDateString(); //prendiamo la data corrente

    const dispatch = useDispatch(); //uso useDispatch per poter richiamare le azioni del mio reducer

    const [formData, setFormData] = useState({  // utilizzo useState per gestire lo stato del form
        title: "",
        date: date,
        text: "",
    });

    const hendleInputChange = (e) => {  //al cambiamento di un elemento di input viene agiornato il vecchio stato con quello nuovo
        const { name, value} = e.target;
        const inputValue = value;
        setFormData({
            ...formData,
            [name]: inputValue,
        });
    };


    const handleSubmit = (e) =>{ //passo il form all'azione che aggiungi alla lista dei dati il mio nuovo elemetno
        e.preventDefault();
        const newNote = {
            id: Math.random(),
            title: formData.title,
            date: formData.date,
            text: formData.text,
        };
        if (newNote.name === "" && newNote.location === "" && newNote.description === ""){
            alert("Tutti i campi sono vuoti inserisci almeno il nome")
            return;
        }else{
            setFormData({
                title: "",
                date: "",
                text: "",
            });
            dispatch(add(newNote))
        }
    }


    return(
        <>
            <div className="h-4"></div>
            <div className="text-center w-full">
                <h1>AGGIUNGI NOTA</h1>
                <div className="h-4"></div>
                <form onSubmit={handleSubmit}> //passo la funzione che getisce l'invio del mio form
                    <div className="">
                        <div>
                            <label className="mt-7">Title</label>
                            <input className="h-6 w-2/4 bg-slate-100" type="text" name="title" value={formData.title} onChange={hendleInputChange}/> 
                        </div> // ho semre bisogno di settare name(nome della sezione del form), valu(passo i valori dello stato del form) e onChange(passo la funzione che gestisce il cambiamento del mio form)
                        <div className="h-4"></div>
                        <div>
                            <label className="mt-7">Text</label>
                            <input className="h-64 w-2/4 bg-slate-100" type="text" name="text" value={formData.text} onChange={hendleInputChange}/>
                        </div>
                        <div className="h-4"></div>
                        <button type="submit">Aggiungi Nota</button>
                    </div>
                </form>
                
            </div>
            
        </>
    )
}

export default AddNotes