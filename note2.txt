###################################################################
######################## APPROFONDIMENTI ##########################
------------------------------------------------------------------

Riassunto: cookie-parser

Il modulo cookie-parser è un middleware per Express che semplifica la gestione dei cookie. Permette di:

Leggere i cookie:

I cookie inviati dal client vengono analizzati e resi accessibili tramite req.cookies come oggetto JavaScript.

Gestire cookie firmati:

Verifica l’integrità dei cookie utilizzando una chiave segreta, rendendo i cookie disponibili in req.signedCookies.

Impostare nuovi cookie:

Utilizzando res.cookie(), puoi creare cookie con opzioni come durata (maxAge), accesso limitato al server (httpOnly), e sicurezza (secure).

Esempio base:

const express = require('express');
const cookieParser = require('cookie-parser');

const app = express();
app.use(cookieParser('secret_key'));

app.get('/', (req, res) => {
    console.log(req.cookies); // Legge i cookie
    res.cookie('user', 'John Doe', { signed: true }); // Imposta un cookie firmato
    res.send('Cookie impostato!');
});

app.listen(3000);

Usato per autenticazione, personalizzazione o tracciamento, è utile ma non adatto a memorizzare dati sensibili senza cifratura.

----------------------------------------------------------------------

Riassunto: cors

Il modulo cors è un middleware per configurare il Cross-Origin Resource Sharing (CORS), che consente richieste da domini diversi. Permette di:

Specificare i domini consentiti:

Configura quali origini possono accedere alle risorse del server (origin).

Definire metodi e intestazioni consentiti:

Personalizza metodi HTTP (GET, POST, ecc.) e intestazioni accessibili (allowedHeaders).

Permettere credenziali:

Consente di inviare cookie o token con credentials: true.

Configurazione base:

const express = require('express');
const cors = require('cors');

const app = express();
app.use(cors({
    origin: 'http://localhost:3000', // Consenti richieste solo da questo dominio
    methods: ['GET', 'POST'], // Permetti solo questi metodi
    allowedHeaders: [
    "Content-Type",
    "Authorization",
    "Cache-Control",
    "Expires",
    "Pragma"
    ],
    credentials: true // Consenti credenziali
}));

app.get('/data', (req, res) => {
    res.json({ message: 'CORS configurato!' });
});

app.listen(5000);

Usato per SPA, microservizi o backend separati, cors aggiunge le intestazioni necessarie per consentire richieste cross-origin in modo sicuro.

---- Riassunto: allowedHeaders in cors

L’opzione allowedHeaders specifica un elenco di intestazioni HTTP personalizzate che il client è autorizzato a includere nelle richieste verso il server.

Serve per dichiarare esplicitamente quali intestazioni possono essere utilizzate dal client.

Se un’intestazione richiesta non è specificata, la richiesta verrà bloccata dal browser.

Esempio:

allowedHeaders: [
    "Content-Type",
    "Authorization",
    "Cache-Control",
    "Expires",
    "Pragma"
]

Content-Type: Specifica il tipo di contenuto della richiesta (es. application/json).

Authorization: Permette di includere token di autenticazione o chiavi API.

Cache-Control, Expires, Pragma: Utilizzati per gestire la cache delle risposte.

Se il client invia un'intestazione non inclusa in allowedHeaders, come X-Custom-Header, la richiesta verrà bloccata.

Nota Importante

Nel codice fornito, l'intestazione Auttorization è scritta in modo errato. Deve essere corretta in Authorization per evitare errori.
----------------------------------------------------------------------------------

Crittografa 

bcrypt e jsonwebtoken (jwt)
bcrypt
Scopo: Proteggere le password degli utenti.
Funzioni principali:

Hash delle password:
Crittografa la password prima di salvarla nel database.

javascript
Copia codice
bcrypt.hash(password, 10, (err, hashedPassword) => {
    if (err) throw err;
    // Salva hashedPassword nel database
});
Confronto password:
Confronta una password fornita dall'utente con un hash salvato.

javascript
Copia codice
bcrypt.compare(enteredPassword, storedHash, (err, isMatch) => {
    if (isMatch) {
        console.log("Password corretta.");
    } else {
        console.log("Password errata.");
    }
});
jsonwebtoken (jwt)
Scopo: Generare e verificare token per autenticazione e autorizzazione.
Struttura del JWT: Header.Payload.Signature
Funzioni principali:

Generare un token:
Crea un token dopo un login corretto.

javascript
Copia codice
const token = jwt.sign({ id: userId }, "secretKey", { expiresIn: "1h" });
console.log(token);
Verificare un token:
Controlla l'integrità del token ricevuto dal client.

javascript
Copia codice
jwt.verify(token, "secretKey", (err, decoded) => {
    if (err) console.log("Token non valido.");
    else console.log("Dati decodificati:", decoded);
});
Flusso comune: bcrypt + jwt
Registrazione utente:
La password viene crittografata con bcrypt e salvata.

javascript
Copia codice
bcrypt.hash(password, 10, (err, hashedPassword) => {
    // Salva hashedPassword nel database
});
Login utente:
Confronta la password con bcrypt.compare.
Se corrisponde, genera un JWT.

javascript
Copia codice
bcrypt.compare(enteredPassword, storedHash, (err, isMatch) => {
    if (isMatch) {
        const token = jwt.sign({ id: userId }, "secretKey", { expiresIn: "1h" });
        res.json({ token });
    }
});
Autorizzazione:
Il client invia il JWT con ogni richiesta.
Il server verifica il token prima di concedere l'accesso.

javascript
Copia codice
jwt.verify(token, "secretKey", (err, decoded) => {
    if (err) res.status(403).send("Token non valido.");
    else req.user = decoded; // Salva i dati dell'utente nella richiesta
});



----------------------------------------------------------------------------------
createAsyncThunk / extraReducers / builder

extraReducers in Redux Toolkit
Gli extraReducers sono una funzionalità di Redux Toolkit che consente di gestire azioni esterne al tuo slice. Questo è utile quando vuoi integrare azioni asincrone (come quelle create con createAsyncThunk) o azioni di altri slice nel tuo slice.

Funzionamento degli extraReducers
Gestione delle azioni esterne:

Gli extraReducers permettono al tuo slice di rispondere ad azioni definite esternamente, ad esempio:
Azioni di un altro slice.
Azioni asincrone di createAsyncThunk.
Automazione con createAsyncThunk: Quando usi createAsyncThunk, Redux Toolkit genera tre tipi di azioni automaticamente:

pending: Quando l'operazione è iniziata.
fulfilled: Quando l'operazione è completata con successo.
rejected: Quando l'operazione fallisce.
Gli extraReducers aggiornano lo stato in base a queste azioni.

Esempio pratico con registerUser
Nel caso di registerUser, che effettua una richiesta API per registrare un utente, puoi aggiornare il tuo stato con extraReducers:

javascript
Copia codice
extraReducers: (builder) => {
    builder
        .addCase(registerUser.pending, (state) => {
            state.isLoading = true; // Quando la richiesta è in corso
        })
        .addCase(registerUser.fulfilled, (state, action) => {
            state.isLoading = false; // Richiesta completata
            state.user = action.payload; // Imposta i dati dell'utente
            state.isAuthenticated = true; // Autenticazione riuscita
        })
        .addCase(registerUser.rejected, (state) => {
            state.isLoading = false; // Richiesta fallita
            state.user = null; // Resetta i dati dell'utente
            state.isAuthenticated = false; // Autenticazione fallita
        });
}
Strumenti di builder
Il parametro builder consente di definire in modo chiaro e leggibile più regole negli extraReducers.

Metodi principali di builder
addCase(action, reducer):

Specifica un'azione da gestire e il suo reducer.
Esempio:
javascript
Copia codice
addCase(registerUser.fulfilled, (state, action) => { ... });
addMatcher(matcher, reducer):

Gestisce azioni che soddisfano una condizione specifica (es. tipi di azioni simili).
Esempio:
javascript
Copia codice
addMatcher(
    (action) => action.type.endsWith('/rejected'),
    (state) => { state.isLoading = false; }
);
addDefaultCase(reducer):

Specifica un reducer di fallback per tutte le azioni non gestite esplicitamente.
Differenze tra reducers ed extraReducers
Reducers	ExtraReducers
Gestiscono azioni interne al slice.	Gestiscono azioni esterne o globali.
Definite nella proprietà reducers.	Reagiscono ad azioni come quelle di createAsyncThunk.
Esempio: increment, decrement.	Esempio: pending, fulfilled, rejected.
Conclusione
Gli extraReducers sono essenziali per integrare logiche basate su azioni asincrone o globali. Nel caso di registerUser, permettono di gestire i tre stati principali (pending, fulfilled, rejected) e aggiornare lo stato della tua applicazione in base al risultato delle richieste API.
